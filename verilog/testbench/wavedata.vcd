$date
	Thu Jan 18 23:55:51 2024
$end
$version
	Icarus Verilog
$end
$timescale
	1ps
$end
$scope module testcache $end
$var wire 1 ! m_write_done $end
$var wire 1 " m_read_done $end
$var wire 128 # c_m_write_data_o [127:0] $end
$var wire 1 $ c_m_wr_o $end
$var wire 1 % c_m_read_o $end
$var wire 128 & c_m_read_data_i [127:0] $end
$var wire 1 ' c_m_busywait_i $end
$var wire 28 ( c_m_address_o [27:0] $end
$var wire 32 ) c_data_o [31:0] $end
$var wire 1 * c_busywait_o $end
$var parameter 32 + address_size $end
$var parameter 32 , c_block_size $end
$var parameter 32 - c_line_size $end
$var reg 32 . address [31:0] $end
$var reg 1 / c_read_i $end
$var reg 1 0 c_wr_i $end
$var reg 1 1 clk $end
$var reg 1 2 reset $end
$scope module data_memory $end
$var wire 1 1 m_clk_i $end
$var wire 1 2 m_reset_i $end
$var wire 1 $ m_wr_i $end
$var wire 128 3 m_wr_data_i [127:0] $end
$var wire 1 % m_read_i $end
$var wire 28 4 m_addr_i [27:0] $end
$var parameter 3 5 IDLE $end
$var parameter 3 6 MEM_READ $end
$var parameter 3 7 MEM_READ_DONE $end
$var parameter 3 8 MEM_WRITE $end
$var parameter 3 9 MEM_WRITE_DONE $end
$var parameter 32 : address_size $end
$var parameter 32 ; c_block_size $end
$var parameter 32 < c_line_size $end
$var parameter 32 = mem_line_size $end
$var reg 2 > byte_read_count [1:0] $end
$var reg 128 ? data_to_be_write [127:0] $end
$var reg 1 ' m_busywait_o $end
$var reg 3 @ m_n_state [2:0] $end
$var reg 128 A m_read_data_o [127:0] $end
$var reg 1 " m_read_done $end
$var reg 3 B m_state [2:0] $end
$var reg 1 ! m_write_done $end
$var reg 32 C tmp_read_data [31:0] $end
$upscope $end
$scope module mycache $end
$var wire 32 D address_i [31:0] $end
$var wire 1 ' c_m_busywait_i $end
$var wire 128 E c_m_read_data_i [127:0] $end
$var wire 1 / c_read_i $end
$var wire 1 0 c_wr_i $end
$var wire 1 1 clk_i $end
$var wire 1 F is_dirty $end
$var wire 1 " m_read_done $end
$var wire 1 ! m_write_done $end
$var wire 1 2 reset_i $end
$var wire 24 G tag_addr [23:0] $end
$var wire 2 H offset_addr [1:0] $end
$var wire 4 I index_addr [3:0] $end
$var wire 28 J c_m_address_wr [27:0] $end
$var wire 28 K c_m_address_read [27:0] $end
$var parameter 3 L IDLE $end
$var parameter 3 M MEM_READ $end
$var parameter 3 N MEM_READ_DONE $end
$var parameter 3 O MEM_WRITE $end
$var parameter 3 P MEM_WRITE_DONE $end
$var parameter 32 Q address_size $end
$var parameter 32 R c_assiotivity $end
$var parameter 32 S c_block_size $end
$var parameter 32 T c_index $end
$var parameter 32 U c_line_size $end
$var parameter 35 V c_tag_size $end
$var reg 1 W c_allow_wr $end
$var reg 1 * c_busywait_o $end
$var reg 32 X c_data_o [31:0] $end
$var reg 1 Y c_hit $end
$var reg 28 Z c_m_address_o [27:0] $end
$var reg 1 % c_m_read_o $end
$var reg 1 $ c_m_wr_o $end
$var reg 128 [ c_m_write_data_o [127:0] $end
$var reg 3 \ c_n_state [2:0] $end
$var reg 3 ] c_state [2:0] $end
$var integer 32 ^ i [31:0] $end
$var integer 32 _ j [31:0] $end
$var integer 32 ` less_used_assiotivity [31:0] $end
$upscope $end
$upscope $end
$scope module testcache $end
$scope module mycache $end
$var reg 1 a \c_valid_bit[0] $end
$upscope $end
$upscope $end
$scope module testcache $end
$scope module mycache $end
$var reg 1 b \c_valid_bit[1] $end
$upscope $end
$upscope $end
$scope module testcache $end
$scope module mycache $end
$var reg 24 c \c_tag[0] [23:0] $end
$upscope $end
$upscope $end
$scope module testcache $end
$scope module mycache $end
$var reg 24 d \c_tag[1] [23:0] $end
$upscope $end
$upscope $end
$scope module testcache $end
$scope module mycache $end
$var reg 128 e \c_word[0] [127:0] $end
$upscope $end
$upscope $end
$scope module testcache $end
$scope module mycache $end
$var reg 3 f \c_usability_bit[1] [2:0] $end
$upscope $end
$upscope $end
$scope module testcache $end
$scope module mycache $end
$var reg 1 g \c_dirty_bit[1] $end
$upscope $end
$upscope $end
$scope module testcache $end
$scope module mycache $end
$var reg 1 h \valid_bit_frm_c[0] $end
$upscope $end
$upscope $end
$scope module testcache $end
$scope module mycache $end
$var reg 1 i \valid_bit_frm_c[1] $end
$upscope $end
$upscope $end
$scope module testcache $end
$scope module mycache $end
$var reg 1 j \valid_bit_frm_c[2] $end
$upscope $end
$upscope $end
$scope module testcache $end
$scope module mycache $end
$var reg 1 k \valid_bit_frm_c[3] $end
$upscope $end
$upscope $end
$scope module testcache $end
$scope module mycache $end
$var reg 24 l \tag_frm_c[0] [23:0] $end
$upscope $end
$upscope $end
$scope module testcache $end
$scope module mycache $end
$var reg 24 m \tag_frm_c[1] [23:0] $end
$upscope $end
$upscope $end
$scope module testcache $end
$scope module mycache $end
$var reg 24 n \tag_frm_c[2] [23:0] $end
$upscope $end
$upscope $end
$scope module testcache $end
$scope module mycache $end
$var reg 24 o \tag_frm_c[3] [23:0] $end
$upscope $end
$upscope $end
$scope module testcache $end
$scope module mycache $end
$var reg 1 p \hit_frm_c[0] $end
$upscope $end
$upscope $end
$scope module testcache $end
$scope module mycache $end
$var reg 1 q \hit_frm_c[1] $end
$upscope $end
$upscope $end
$scope module testcache $end
$scope module mycache $end
$var reg 1 r \hit_frm_c[2] $end
$upscope $end
$upscope $end
$scope module testcache $end
$scope module mycache $end
$var reg 1 s \hit_frm_c[3] $end
$upscope $end
$upscope $end
$scope module testcache $end
$scope module mycache $end
$var reg 1 t \hit_frm_c_AND_valid_bit_frm_c[0] $end
$upscope $end
$upscope $end
$scope module testcache $end
$scope module mycache $end
$var reg 1 u \hit_frm_c_AND_valid_bit_frm_c[1] $end
$upscope $end
$upscope $end
$scope module testcache $end
$scope module mycache $end
$var reg 1 v \hit_frm_c_AND_valid_bit_frm_c[2] $end
$upscope $end
$upscope $end
$scope module testcache $end
$scope module mycache $end
$var reg 1 w \hit_frm_c_AND_valid_bit_frm_c[3] $end
$upscope $end
$upscope $end
$scope module testcache $end
$scope module mycache $end
$var reg 32 x \data_frm_c[0] [31:0] $end
$upscope $end
$upscope $end
$scope module testcache $end
$scope module mycache $end
$var reg 32 y \data_frm_c[1] [31:0] $end
$upscope $end
$upscope $end
$scope module testcache $end
$scope module mycache $end
$var reg 32 z \data_frm_c[2] [31:0] $end
$upscope $end
$upscope $end
$scope module testcache $end
$scope module mycache $end
$var reg 32 { \data_frm_c[3] [31:0] $end
$upscope $end
$upscope $end
$scope module testcache $end
$scope module mycache $end
$var reg 3 | \usability_bit_frm_c[0] [2:0] $end
$upscope $end
$upscope $end
$scope module testcache $end
$scope module mycache $end
$var reg 3 } \usability_bit_frm_c[1] [2:0] $end
$upscope $end
$upscope $end
$scope module testcache $end
$scope module mycache $end
$var reg 3 ~ \usability_bit_frm_c[2] [2:0] $end
$upscope $end
$upscope $end
$scope module testcache $end
$scope module mycache $end
$var reg 3 !" \usability_bit_frm_c[3] [2:0] $end
$upscope $end
$upscope $end
$scope module testcache $end
$scope module mycache $end
$var reg 1 "" \dirty_bit_frm_c[0] $end
$upscope $end
$upscope $end
$scope module testcache $end
$scope module mycache $end
$var reg 1 #" \dirty_bit_frm_c[1] $end
$upscope $end
$upscope $end
$scope module testcache $end
$scope module mycache $end
$var reg 1 $" \dirty_bit_frm_c[2] $end
$upscope $end
$upscope $end
$scope module testcache $end
$scope module mycache $end
$var reg 1 %" \dirty_bit_frm_c[3] $end
$upscope $end
$upscope $end
$scope module testcache $end
$scope module data_memory $end
$var reg 32 &" \memory[0] [31:0] $end
$upscope $end
$upscope $end
$scope module testcache $end
$scope module data_memory $end
$var reg 32 '" \memory[1] [31:0] $end
$upscope $end
$upscope $end
$scope module testcache $end
$scope module data_memory $end
$var reg 32 (" \memory[2] [31:0] $end
$upscope $end
$upscope $end
$scope module testcache $end
$scope module data_memory $end
$var reg 32 )" \memory[3] [31:0] $end
$upscope $end
$upscope $end
$enddefinitions $end
$comment Show the parameter values. $end
$dumpall
b11000 V
b100000 U
b100 T
b10 S
b10 R
b100000 Q
b100 P
b10 O
b11 N
b1 M
b0 L
b100000 =
b100000 <
b10 ;
b100000 :
b100 9
b10 8
b11 7
b1 6
b0 5
b100000 -
b10 ,
b100000 +
$end
#0
$dumpvars
b1000100010001000100000000 )"
b0 ("
b10000 '"
b10000000100010000000000000001 &"
x%"
x$"
x#"
x""
bx !"
bx ~
bx }
bx |
bx {
bx z
bx y
bx x
xw
xv
xu
xt
xs
xr
xq
xp
bx o
bx n
bx m
bx l
xk
xj
xi
xh
xg
bx f
bx e
bx d
bx c
xb
xa
bx `
bx _
bx ^
bx ]
bx \
bx [
bx Z
xY
bx X
xW
bx K
b0xxxxxxxxxxxxxxxxxxxxxxxx J
bx I
bx H
bx G
xF
bx E
bx D
bx C
bx B
bx A
bx @
bx ?
bx >
bx 4
bx 3
x2
11
x0
x/
bx .
x*
bx )
bx (
x'
bx &
x%
x$
bx #
x"
x!
$end
#1000
0W
0$
0%
0*
b0 \
b0 ]
0"
0!
0'
bx !"
bx {
xw
1s
x%"
bx o
xk
bx ~
bx z
xv
1r
x$"
bx n
xj
bx }
bx y
xu
1q
x#"
bx m
xi
bx |
bx x
xt
1p
x""
bx l
xh
0Y
b0 C
b0 @
b0 B
b0 f
0g
b0 d
0b
b0 c
b0 e
0a
b100 _
b100 ^
12
#2000
02
#5000
01
#7000
b1 \
b0 J
0F
b0 `
b0 (
b0 4
b0 Z
b0 !"
b0 {
0w
1s
0%"
b0 o
0k
b0 ~
b0 z
0v
1r
0$"
b0 n
0j
b0 }
b0 y
0u
1q
0#"
b0 m
0i
b0 |
b0 x
0t
1p
0""
b0 l
0h
b100 ^
b0 K
b10 H
b0 I
b0 G
00
1/
b1010 .
b1010 D
#10000
b1 @
1%
1*
b1 ]
b0 >
b0xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx &
b0xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx A
b0xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx E
11
#15000
01
#20000
1'
b1 B
b0xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx &
b0xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx A
b0xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx E
11
#21000
b10000000100010000000000000001 C
#25000
01
#30000
b1 >
b100000001000100000000000000010000000000000000000000000000000000000000000000000000000000000000xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx &
b100000001000100000000000000010000000000000000000000000000000000000000000000000000000000000000xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx A
b100000001000100000000000000010000000000000000000000000000000000000000000000000000000000000000xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx E
11
#31000
b10000 C
#35000
01
#40000
b10 >
b10000000100000001000100000000000000010000000000000000000000000000000000000000000000000000000000000000 &
b10000000100000001000100000000000000010000000000000000000000000000000000000000000000000000000000000000 A
b10000000100000001000100000000000000010000000000000000000000000000000000000000000000000000000000000000 E
11
#41000
b0 C
#45000
01
#50000
b11 @
b11 >
b100000001000000010001000000000000000100000000000000000000000000000000 &
b100000001000000010001000000000000000100000000000000000000000000000000 A
b100000001000000010001000000000000000100000000000000000000000000000000 E
11
#51000
b1000100010001000100000000 C
#55000
01
#60000
1W
0%
b11 \
b0 @
1"
0'
b11 B
b0 >
b1000100010001000100000000000000000000000000000000000000000000000000000000000000000001000000010000000100010000000000000001 &
b1000100010001000100000000000000000000000000000000000000000000000000000000000000000001000000010000000100010000000000000001 A
b1000100010001000100000000000000000000000000000000000000000000000000000000000000000001000000010000000100010000000000000001 E
11
#65000
01
#70000
0W
b0 \
0"
b11 ]
b0 B
b1 `
b0 !"
b0 {
0w
1s
0%"
b0 o
0k
b0 ~
b0 z
0v
1r
0$"
b0 n
0j
b0 }
b0 y
0u
1q
0#"
b0 m
0i
b0 )
b0 X
1Y
b1 |
b0 x
1t
1p
0""
b0 l
1h
b1000100010001000100000000000000010001000100010001000000000000000000000000000000000000000000000000000000000000000000010000 &
b1000100010001000100000000000000010001000100010001000000000000000000000000000000000000000000000000000000000000000000010000 A
b1000100010001000100000000000000010001000100010001000000000000000000000000000000000000000000000000000000000000000000010000 E
b0 f
b100 ^
b1000100010001000100000000000000000000000000000000000000000000000000000000000000000001000000010000000100010000000000000001 e
b0 c
1a
11
#75000
01
#80000
0*
b0 ]
b1000100010001000100000000000000010001000100010001000000000000000100010001000100010000000000000000000000000000000000000000 &
b1000100010001000100000000000000010001000100010001000000000000000100010001000100010000000000000000000000000000000000000000 A
b1000100010001000100000000000000010001000100010001000000000000000100010001000100010000000000000000000000000000000000000000 E
11
#85000
01
#90000
b1000100010001000100000000000000010001000100010001000000000000000100010001000100010000000000000001000100010001000100000000 &
b1000100010001000100000000000000010001000100010001000000000000000100010001000100010000000000000001000100010001000100000000 A
b1000100010001000100000000000000010001000100010001000000000000000100010001000100010000000000000001000100010001000100000000 E
11
#95000
01
#97000
