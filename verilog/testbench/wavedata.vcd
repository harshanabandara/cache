$date
	Tue Jan 16 19:17:58 2024
$end
$version
	Icarus Verilog
$end
$timescale
	1ps
$end
$scope module testcache $end
$var wire 1 ! m_write_done $end
$var wire 1 " m_read_done $end
$var wire 128 # c_m_write_data_o [127:0] $end
$var wire 1 $ c_m_wr_o $end
$var wire 1 % c_m_read_o $end
$var wire 128 & c_m_read_data_i [127:0] $end
$var wire 1 ' c_m_busywait_i $end
$var wire 28 ( c_m_address_o [27:0] $end
$var wire 32 ) c_data_o [31:0] $end
$var wire 1 * c_busywait_o $end
$var parameter 32 + address_size $end
$var parameter 32 , c_block_size $end
$var parameter 32 - c_line_size $end
$var reg 32 . address [31:0] $end
$var reg 1 / c_read_i $end
$var reg 1 0 c_wr_i $end
$var reg 1 1 clk $end
$var reg 1 2 reset $end
$scope module data_memory $end
$var wire 1 1 m_clk_i $end
$var wire 1 2 m_reset_i $end
$var wire 1 $ m_wr_i $end
$var wire 128 3 m_wr_data_i [127:0] $end
$var wire 1 % m_read_i $end
$var wire 28 4 m_addr_i [27:0] $end
$var parameter 3 5 IDLE $end
$var parameter 3 6 MEM_READ $end
$var parameter 3 7 MEM_READ_DONE $end
$var parameter 3 8 MEM_WRITE $end
$var parameter 3 9 MEM_WRITE_DONE $end
$var parameter 32 : address_size $end
$var parameter 32 ; c_block_size $end
$var parameter 32 < c_line_size $end
$var parameter 32 = mem_line_size $end
$var reg 2 > byte_read_count [1:0] $end
$var reg 128 ? data_to_be_write [127:0] $end
$var reg 1 ' m_busywait_o $end
$var reg 3 @ m_n_state [2:0] $end
$var reg 128 A m_read_data_o [127:0] $end
$var reg 1 " m_read_done $end
$var reg 3 B m_state [2:0] $end
$var reg 1 ! m_write_done $end
$upscope $end
$scope module mycache $end
$var wire 32 C address_i [31:0] $end
$var wire 1 ' c_m_busywait_i $end
$var wire 128 D c_m_read_data_i [127:0] $end
$var wire 1 / c_read_i $end
$var wire 1 0 c_wr_i $end
$var wire 1 1 clk_i $end
$var wire 1 E is_dirty $end
$var wire 1 " m_read_done $end
$var wire 1 ! m_write_done $end
$var wire 1 2 reset_i $end
$var wire 24 F tag_addr [23:0] $end
$var wire 2 G offset_addr [1:0] $end
$var wire 4 H index_addr [3:0] $end
$var wire 28 I c_m_address_wr [27:0] $end
$var wire 28 J c_m_address_read [27:0] $end
$var parameter 3 K IDLE $end
$var parameter 3 L MEM_READ $end
$var parameter 3 M MEM_READ_DONE $end
$var parameter 3 N MEM_WRITE $end
$var parameter 3 O MEM_WRITE_DONE $end
$var parameter 32 P address_size $end
$var parameter 32 Q c_assiotivity $end
$var parameter 32 R c_block_size $end
$var parameter 32 S c_index $end
$var parameter 32 T c_line_size $end
$var parameter 35 U c_tag_size $end
$var reg 1 V c_allow_wr $end
$var reg 1 * c_busywait_o $end
$var reg 32 W c_data_o [31:0] $end
$var reg 1 X c_hit $end
$var reg 28 Y c_m_address_o [27:0] $end
$var reg 1 % c_m_read_o $end
$var reg 1 $ c_m_wr_o $end
$var reg 128 Z c_m_write_data_o [127:0] $end
$var reg 3 [ c_n_state [2:0] $end
$var reg 3 \ c_state [2:0] $end
$var integer 32 ] i [31:0] $end
$var integer 32 ^ j [31:0] $end
$var integer 32 _ less_used_assiotivity [31:0] $end
$upscope $end
$upscope $end
$scope module testcache $end
$scope module mycache $end
$var reg 1 ` \c_valid_bit[36] $end
$upscope $end
$upscope $end
$scope module testcache $end
$scope module mycache $end
$var reg 1 a \c_valid_bit[37] $end
$upscope $end
$upscope $end
$scope module testcache $end
$scope module mycache $end
$var reg 24 b \c_tag[36] [23:0] $end
$upscope $end
$upscope $end
$scope module testcache $end
$scope module mycache $end
$var reg 24 c \c_tag[37] [23:0] $end
$upscope $end
$upscope $end
$scope module testcache $end
$scope module mycache $end
$var reg 128 d \c_word[37] [127:0] $end
$upscope $end
$upscope $end
$scope module testcache $end
$scope module mycache $end
$var reg 3 e \c_usability_bit[37] [2:0] $end
$upscope $end
$upscope $end
$scope module testcache $end
$scope module mycache $end
$var reg 1 f \c_dirty_bit[37] $end
$upscope $end
$upscope $end
$scope module testcache $end
$scope module mycache $end
$var reg 1 g \valid_bit_frm_c[0] $end
$upscope $end
$upscope $end
$scope module testcache $end
$scope module mycache $end
$var reg 1 h \valid_bit_frm_c[1] $end
$upscope $end
$upscope $end
$scope module testcache $end
$scope module mycache $end
$var reg 1 i \valid_bit_frm_c[2] $end
$upscope $end
$upscope $end
$scope module testcache $end
$scope module mycache $end
$var reg 1 j \valid_bit_frm_c[3] $end
$upscope $end
$upscope $end
$scope module testcache $end
$scope module mycache $end
$var reg 24 k \tag_frm_c[0] [23:0] $end
$upscope $end
$upscope $end
$scope module testcache $end
$scope module mycache $end
$var reg 24 l \tag_frm_c[1] [23:0] $end
$upscope $end
$upscope $end
$scope module testcache $end
$scope module mycache $end
$var reg 24 m \tag_frm_c[2] [23:0] $end
$upscope $end
$upscope $end
$scope module testcache $end
$scope module mycache $end
$var reg 24 n \tag_frm_c[3] [23:0] $end
$upscope $end
$upscope $end
$scope module testcache $end
$scope module mycache $end
$var reg 1 o \hit_frm_c[0] $end
$upscope $end
$upscope $end
$scope module testcache $end
$scope module mycache $end
$var reg 1 p \hit_frm_c[1] $end
$upscope $end
$upscope $end
$scope module testcache $end
$scope module mycache $end
$var reg 1 q \hit_frm_c[2] $end
$upscope $end
$upscope $end
$scope module testcache $end
$scope module mycache $end
$var reg 1 r \hit_frm_c[3] $end
$upscope $end
$upscope $end
$scope module testcache $end
$scope module mycache $end
$var reg 1 s \hit_frm_c_AND_valid_bit_frm_c[0] $end
$upscope $end
$upscope $end
$scope module testcache $end
$scope module mycache $end
$var reg 1 t \hit_frm_c_AND_valid_bit_frm_c[1] $end
$upscope $end
$upscope $end
$scope module testcache $end
$scope module mycache $end
$var reg 1 u \hit_frm_c_AND_valid_bit_frm_c[2] $end
$upscope $end
$upscope $end
$scope module testcache $end
$scope module mycache $end
$var reg 1 v \hit_frm_c_AND_valid_bit_frm_c[3] $end
$upscope $end
$upscope $end
$scope module testcache $end
$scope module mycache $end
$var reg 32 w \data_frm_c[0] [31:0] $end
$upscope $end
$upscope $end
$scope module testcache $end
$scope module mycache $end
$var reg 32 x \data_frm_c[1] [31:0] $end
$upscope $end
$upscope $end
$scope module testcache $end
$scope module mycache $end
$var reg 32 y \data_frm_c[2] [31:0] $end
$upscope $end
$upscope $end
$scope module testcache $end
$scope module mycache $end
$var reg 32 z \data_frm_c[3] [31:0] $end
$upscope $end
$upscope $end
$scope module testcache $end
$scope module mycache $end
$var reg 3 { \usability_bit_frm_c[0] [2:0] $end
$upscope $end
$upscope $end
$scope module testcache $end
$scope module mycache $end
$var reg 3 | \usability_bit_frm_c[1] [2:0] $end
$upscope $end
$upscope $end
$scope module testcache $end
$scope module mycache $end
$var reg 3 } \usability_bit_frm_c[2] [2:0] $end
$upscope $end
$upscope $end
$scope module testcache $end
$scope module mycache $end
$var reg 3 ~ \usability_bit_frm_c[3] [2:0] $end
$upscope $end
$upscope $end
$scope module testcache $end
$scope module mycache $end
$var reg 1 !" \dirty_bit_frm_c[0] $end
$upscope $end
$upscope $end
$scope module testcache $end
$scope module mycache $end
$var reg 1 "" \dirty_bit_frm_c[1] $end
$upscope $end
$upscope $end
$scope module testcache $end
$scope module mycache $end
$var reg 1 #" \dirty_bit_frm_c[2] $end
$upscope $end
$upscope $end
$scope module testcache $end
$scope module mycache $end
$var reg 1 $" \dirty_bit_frm_c[3] $end
$upscope $end
$upscope $end
$enddefinitions $end
$comment Show the parameter values. $end
$dumpall
b11000 U
b100000 T
b100 S
b10 R
b10 Q
b100000 P
b100 O
b10 N
b11 M
b1 L
b0 K
b100000 =
b100000 <
b10 ;
b100000 :
b100 9
b10 8
b11 7
b1 6
b0 5
b100000 -
b10 ,
b100000 +
$end
#0
$dumpvars
x$"
x#"
x""
x!"
bx ~
bx }
bx |
bx {
bx z
bx y
bx x
bx w
xv
xu
xt
xs
xr
xq
xp
xo
bx n
bx m
bx l
bx k
xj
xi
xh
xg
xf
bx e
bx d
bx c
bx b
xa
x`
bx _
bx ^
bx ]
bx \
bx [
bx Z
bx Y
xX
bx W
xV
bx J
b0xxxxxxxxxxxxxxxxxxxxxxxx I
bx H
bx G
bx F
xE
bx D
bx C
bx B
bx A
bx @
bx ?
bx >
bx 4
bx 3
x2
11
x0
x/
bx .
x*
bx )
bx (
x'
bx &
x%
x$
bx #
x"
x!
$end
#1000
0V
0$
0%
0*
b0 [
b0 \
0"
0!
0'
bx ~
bx z
xv
1r
x$"
bx n
xj
bx }
bx y
xu
1q
x#"
bx m
xi
bx |
bx x
xt
1p
x""
bx l
xh
bx {
bx w
xs
1o
x!"
bx k
xg
0X
b0 @
b0 B
b0 e
0f
b0 c
b0 d
0a
b0 b
0`
b100 ^
b100 ]
12
#2000
02
#5000
01
#7000
b1 [
b0 I
0E
b0 _
b0 (
b0 4
b0 Y
b0 ~
b0 z
0v
1r
0$"
b0 n
0j
b0 }
b0 y
0u
1q
0#"
b0 m
0i
b0 |
b0 x
0t
1p
0""
b0 l
0h
b0 {
b0 w
0s
1o
0!"
b0 k
0g
b100 ]
b0 J
b10 G
b0 H
b0 F
00
1/
b1010 .
b1010 C
#10000
b1 @
1%
1*
b1 \
b0 >
11
#15000
01
#17000
b0 ~
b0 z
0v
1r
0$"
b0 n
0j
b0 }
b0 y
0u
1q
0#"
b0 m
0i
b0 |
b0 x
0t
1p
0""
b0 l
0h
b0 {
b0 w
0s
1o
0!"
b0 k
0g
b100 ]
b0 G
b10 .
b10 C
#20000
1'
b1 B
11
#25000
01
#30000
b1 >
b1xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx &
b1xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx A
b1xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx D
11
#35000
01
#40000
b1xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx &
b1xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx A
b1xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx D
b10 >
11
#45000
01
#50000
b11 @
b11 >
b1xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx &
b1xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx A
b1xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx D
11
#55000
01
#60000
0%
b11 [
b0 @
1"
0'
b11 B
b1000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000001 &
b1000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000001 A
b1000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000001 D
b0 >
11
#65000
01
#70000
1V
b0 [
0"
b11 \
b0 B
11
#75000
01
#80000
0V
0*
b0 \
b1 _
b0 ~
b0 z
0v
1r
0$"
b0 n
0j
b0 }
b0 y
0u
1q
0#"
b0 m
0i
b0 |
b0 x
0t
1p
0""
b0 l
0h
b1 )
b1 W
1X
b100 {
b1 w
1s
1o
0!"
b0 k
1g
b100 ]
11
#85000
01
#90000
11
#95000
01
#97000
